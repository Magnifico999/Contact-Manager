@page "/Contact/Delete/{Id}"
@using ContactBook.BlazorServer.EndPoints

@inject IContactRepository _ContactRepository
@inject NavigationManager _Nav


@if (!IsSuccess)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <strong>Something went wrong!</strong>
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <strong>Something went wrong!</strong>
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
else if (dto == null)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <strong>Loading......</strong>
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
else
{
    <div class="card" style="width: 36rem;">

        <div class="card-body">
            <h5 class="card-title">Contact Detail</h5>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">FirstName: @dto.FirstName</li>
            <li class="list-group-item"> LastName: @dto.LastName</li>
            <li class="list-group-item"> About: @dto.About</li>
            <li class="list-group-item"> Group: @dto.Group</li>

        </ul>
        <div @onclick="DeleteContact" class="btn btn-danger">
            <span class=" oi oi-delete"></span>
            Delete Contact
        </div>
    </div>
}


@code {
    [Parameter]
    public string Id { get; set; }
    private ContactDto dto = new ContactDto();
    private bool IsSuccess = true;
    protected override async Task OnInitializedAsync()
    {
        string apiUrl = StaticEndpoints.GetContactByIdEndpoint;
        int id = Convert.ToInt32(Id);
        dto = await _ContactRepository.GetById(apiUrl, id);
    }
    private async Task DeleteContact()
    {
        string apiUrl = StaticEndpoints.DeleteContactEndpoint;
        IsSuccess = await _ContactRepository.Delete(apiUrl, dto.Id);
        if (IsSuccess)
        {
            _Nav.NavigateTo("/Contact/List");
        }
    }
}
